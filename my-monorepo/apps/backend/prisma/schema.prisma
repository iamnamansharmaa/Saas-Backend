generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           String         @id @default(uuid())
  name         String         @unique
  users        UserTenant[]
  products     Product[] 
  orders       Order[]
  subscriptions Subscription[]
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  tenants       UserTenant[]
  orders        Order[]
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model UserTenant {
  id       String @id @default(uuid())
  userId   String
  tenantId String
  roleId   String

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId]) 
}

model Role {
  id    String       @id @default(uuid())
  name  String       @unique
  users UserTenant[]
}

model Product {
  id          String   @id @default(uuid())
  tenantId    String 
  name        String
  description String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders Order[]
}

model Order {
  id        String   @id @default(uuid())
  userId    String 
  tenantId  String 
  productId String 
  status    String   @default("pending") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String 
  tenantId  String 
  plan      String
  status    String   @default("active") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}